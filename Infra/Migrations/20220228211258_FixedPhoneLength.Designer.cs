// <auto-generated />
using System;
using Infra.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infra.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220228211258_FixedPhoneLength")]
    partial class FixedPhoneLength
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Entities.Administrator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(14)")
                        .HasColumnName("Phone number");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Administrators", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Apart", b =>
                {
                    b.Property<int>("Number")
                        .HasColumnType("int")
                        .HasColumnName("Apart number");

                    b.Property<int>("Block")
                        .HasColumnType("int")
                        .HasColumnName("Apart block");

                    b.HasKey("Number", "Block");

                    b.ToTable("Aparts", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Packages", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Addressee")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Addressed to");

                    b.Property<string>("BarCode")
                        .IsRequired()
                        .HasColumnType("varchar(14)");

                    b.Property<int>("Block")
                        .HasColumnType("int");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("Item name");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("SenderAddress")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Sender address");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Number", "Block");

                    b.ToTable("Packages", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Resident", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Block")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(14)")
                        .HasColumnName("Phone number");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Number", "Block");

                    b.ToTable("Residents", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Visitant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("Block")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(14)")
                        .HasColumnName("Phone number");

                    b.HasKey("Id");

                    b.HasIndex("Number", "Block");

                    b.ToTable("Visitants", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Administrator", b =>
                {
                    b.OwnsOne("Domain.ValueObjects.Document", "Document", b1 =>
                        {
                            b1.Property<Guid>("AdministratorId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("varchar(14)")
                                .HasColumnName("Document number");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("varchar(6)")
                                .HasColumnName("Document type");

                            b1.HasKey("AdministratorId");

                            b1.ToTable("Administrators");

                            b1.WithOwner()
                                .HasForeignKey("AdministratorId");
                        });

                    b.OwnsOne("Domain.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("AdministratorId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("varchar(120)")
                                .HasColumnName("First name");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("varchar(120)")
                                .HasColumnName("Last name");

                            b1.HasKey("AdministratorId");

                            b1.ToTable("Administrators");

                            b1.WithOwner()
                                .HasForeignKey("AdministratorId");
                        });

                    b.Navigation("Document")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Packages", b =>
                {
                    b.HasOne("Domain.Entities.Apart", "Apart")
                        .WithMany("Packages")
                        .HasForeignKey("Number", "Block")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apart");
                });

            modelBuilder.Entity("Domain.Entities.Resident", b =>
                {
                    b.HasOne("Domain.Entities.Apart", "Apart")
                        .WithMany("Residents")
                        .HasForeignKey("Number", "Block")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.ValueObjects.Document", "Document", b1 =>
                        {
                            b1.Property<Guid>("ResidentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("varchar(14)")
                                .HasColumnName("Document number");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("varchar(6)")
                                .HasColumnName("Document type");

                            b1.HasKey("ResidentId");

                            b1.ToTable("Residents");

                            b1.WithOwner()
                                .HasForeignKey("ResidentId");
                        });

                    b.OwnsOne("Domain.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("ResidentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("varchar(120)")
                                .HasColumnName("First name");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("varchar(120)")
                                .HasColumnName("Last name");

                            b1.HasKey("ResidentId");

                            b1.ToTable("Residents");

                            b1.WithOwner()
                                .HasForeignKey("ResidentId");
                        });

                    b.Navigation("Apart");

                    b.Navigation("Document")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Visitant", b =>
                {
                    b.HasOne("Domain.Entities.Apart", "Apart")
                        .WithMany("Visitants")
                        .HasForeignKey("Number", "Block")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.ValueObjects.Document", "Document", b1 =>
                        {
                            b1.Property<Guid>("VisitantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("varchar(14)")
                                .HasColumnName("Document number");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("varchar(6)")
                                .HasColumnName("Document type");

                            b1.HasKey("VisitantId");

                            b1.ToTable("Visitants");

                            b1.WithOwner()
                                .HasForeignKey("VisitantId");
                        });

                    b.OwnsOne("Domain.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("VisitantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("varchar(120)")
                                .HasColumnName("First name");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("varchar(120)")
                                .HasColumnName("Last name");

                            b1.HasKey("VisitantId");

                            b1.ToTable("Visitants");

                            b1.WithOwner()
                                .HasForeignKey("VisitantId");
                        });

                    b.Navigation("Apart");

                    b.Navigation("Document")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Apart", b =>
                {
                    b.Navigation("Packages");

                    b.Navigation("Residents");

                    b.Navigation("Visitants");
                });
#pragma warning restore 612, 618
        }
    }
}
